--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: text_plugins_common
Element-Type: context
Element-Version: 2.0
Id: _LkBSkBsDEembU9g-6bJhVg
Save-Time: 11/19/20 5:27 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

global [val hilotecOdfOutDir $pdfDir ] -override
global [val MsOOOutDir $pdfDir ] -override
global [val ConfiguredTextPlugin "" ] -override

proc TextPluginSelect [ val useTextPlugin  "hilotec_odf"] {
	global [val ConfiguredTextPlugin "useTextPlugin" ] -override
	if [$useTextPlugin | equals "hilotec_odf" ] {
		ConfigureHilotecODF_TextVerarbeitung
	} -else {
		ConfigureMsOO_TextVerarbeitung
	}
}
proc SetupTextPlugins {
	// requires ImportSwissBase, BasicMandanten, BasicAbrechnungssystems run before
	OpenAndResetStartPerspektive
	
	// To print an AUF we need a text plugin. list of krankenkasse, AUF vorlagen
	// The krankenkass comes in via ImportSwissBase
	if [ SelectKontakt -bezeichnung1 "Aquilana" ] {
		log "KK Aquilana schon vorhanden"
	} -else {
		ReadDataImport -file [ concat  [get-user-dir] "/rcptt/Universal_krankenkasse.xls" ]
		SelectKontakt -bezeichnung1 "Aquilana"
	}
	get-eclipse-window | gen-screenshot [concat $imagesDir "Aquilana_imported.png"]	
	ConfigureHilotecODF_TextVerarbeitung
	ConfigureMsOO_TextVerarbeitung
	ImportHilotecODF_Vorlagen
}

proc EnsureLibreOffficIsInstalled {
	log "EnsureLibreOffficIsInstalled: Check whether libreoffice ist installed"
	if [ get-by-os  -win false -macosx false -linux true ] {
		let [ val result [ exec-process -command "libreoffice" --args "--version"  ] ] {
			concat "EnsureLibreOffficIsInstalled: libreoffice version returned " [ $result | get  exitCode ] " out " 
				[ $result | get  stdout ] | log
			concat "EnsureLibreOffficIsInstalled: libreoffice version returned " [ $result | get  exitCode ] " out " 
			$result | get  exitCode | equals 0 | assert-true
			let [ val result [ exec-process -command "which" --args "libreoffice"  ] ] {
				global [val lowriter [ invoke-static "org.apache.commons.lang3" "org.apache.commons.lang3.StringUtils" "chop" [ $result | get  stdout ] ]  ] -override
				concat "EnsureLibreOffficIsInstalled: lowriter is now set to: " $lowriter ": done"| log
			}
		}
		log "EnsureLibreOffficIsInstalled: libreoffice ist installed (LINUX)"
	}
    create-entire-screenshot [concat $imagesDir "EnsureLibreOffficIsInstalled.png"]

}

proc CloseLibreOffice {
	if [ get-by-os  -win false -macosx false -linux true ] {
		exec-process -command killall -args oosplash -ignoreExitCode -ignoreStderr
	} -else {
		log "I do not now howto close CloseLibreOffice under windows or macosx"
	}
}

CloseLibreOffice // Ensure that we have no LibreOffice process open when running our tests

proc ConfigureHilotecODF_TextVerarbeitung {
	EnsureLibreOffficIsInstalled
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		get-tree | select [ t Textverarbeitung ]
		// Button name various on number of installed text plugins!
		// There replace 0 :, etc by .*
	  	get-window [ t preferences ] | gen-screenshot [concat $imagesDir "select-hilotecODF.png" ]
	    with [get-button [ t print_save_letter_extern ] ] {
	        check
	    }
	    with [get-editbox -after [get-label [ t pref_externes_textprogramm ] ] ] {
	        set-text [ concat  [get-user-dir] "/extern" ]
	    }
	    with [get-button [ t pref_texte_lokal_editieren ] ] {
	        check
	    }
	    get-button ".*Hilotec-OpenDocument" | click
		get-tree | select "Hilotec-OpenDocument"
		if [ get-by-os  -win true -macosx false -linux false ] {
			global [val lowriter "C:\\Program Files\\LibreOffice\\program\\swriter" ] -override
		} // else lowriter variable set mby LOWriterMustBeInstalled
		with [get-editbox -after [get-label "OpenDocument Editor"]] {
			set-text $lowriter
		}
		with [get-editbox -after [get-label "Argumente zum Drucken"]] {
			set-text [ concat "--headless --convert-to pdf --outdir " $hilotecOdfOutDir ]
		}
		with [get-editbox -after [get-label "Argumente fuer PDF-Konvertierung"]] {
			set-text [ concat "--headless --convert-to pdf --outdir " $hilotecOdfOutDir ]
		}
		with [get-editbox -after [get-label "PDF-Konverter"]] {
			set-text $lowriter
		}
		get-button "Wrapper Skript aktivieren" | uncheck
	  	get-window [ t preferences ] | gen-screenshot [concat $imagesDir "config-hilotecODF.png" ]
		get-button [ t apply_and_close ] | click
	}
}

proc ImportHilotecODF_Vorlagen [ val vorlage [ concat $rcpttDir "elexis-vorlagen-master/openoffice/AUF-Zeugnis.odt" ] ] {
	concat "ImportHilotecODF_Vorlagen should import: " $vorlage | log
	get-file $vorlage | get exists | assert-true -message [ concat "File " $vorlage " not found" ]
	open-window-by-name [ t Dokumente_Textvorlagen_Management ]
	set-dialog-result File $vorlage
	get-view "Textvorlagen Management" | get-button "Beliebige Vorlage.*importieren" | click
	try -command {
		get-window Systemvorlage | get-button [ t yes ] | click
	} -catch { 
		log "Keine Systemvorlage"
	}
	try -command {
		with [get-window -class TextTemplateImportConflictDialog] {
			get-button "Ersetzen.*" | click
			get-button OK | click
		}
		concat "Vorlage: " $vorlage " existiert bereits, wurde ersetzt" | log
	
	} -catch { 
		log "Vorlage existiert noch nicht"
	}
	OpenAndResetStartPerspektive
}
/* Mit /ohne Adresse
with [get-view "Textvorlagen Management" | get-table] {
    select Liste -column "Name der Vorlage"
    get-cell 1 4 | uncheck
}
with [get-view "Textvorlagen Management" | get-table] {
    select Liste -column "Name der Vorlage"
    get-cell 1 4 | check
}
*/
proc TextVorlagenEntfernen [ val name Liste ] {
	open-window-by-name [ t Textvorlagen_Management ]
	get-view [ t Textvorlagen_Management ] | get-table |
		select $name -column [ t Name_der_Vorlage ] |
		get-menu [ t Delete_template ]
}


proc EnsureOpenOfficeIsInstalled {
	log "EnsureOpenOfficeIsInstalled: Check whether openoffice ist installed"
	// we used the DEBS from
	// https://netcologne.dl.sourceforge.net/project/openofficeorg.mirror/4.1.7/binaries/de/Apache_OpenOffice_4.1.7_Linux_x86-64_install-deb_de.tar.gz
	if [ get-by-os  -win false -macosx false -linux true ] {
		let [ val result [ exec-process -command "test" --args "-f /opt/openoffice4/program/swriter" ] ] {
			concat "EnsureOpenOfficeIsInstalled: openoffice version returned " [ $result | get  exitCode ] " out " 
				[ $result | get  stdout ] | log
			$result | get  exitCode | equals 0 | assert-true
		}
		log "EnsureOpenOfficeIsInstalled: openoffice ist installed (LINUX)"
	}
}

proc ConfigureMsOO_TextVerarbeitung {
	EnsureOpenOfficeIsInstalled
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		get-tree | select [ t Textverarbeitung ]
		// Button name various on number of installed text plugins!
		// There replace 0 :, etc by .*
	  	get-window [ t preferences ] | gen-screenshot [concat $imagesDir "select-MsOO.png" ]
	    with [get-button [ t print_save_letter_extern ] ] {
	    	uncheck // Must be unchecked for OpenOffice Text plugin
	    }
	    with [get-button [ t pref_texte_lokal_editieren ] ] {
	    	uncheck // Must be unchecked for OpenOffice Text plugin
	    }
	    get-button ".*OpenOffice 3.x" | click
   		get-tree | select "Textverarbeitung/OpenOffice.org"
		with [get-editbox -after [get-label "Application home"]] {
		    click-text
		    set-text "/opt/openoffice4/program"
		}
		get-link ".*Define.*" | click-link
		with [get-window "OpenOffice.org application"] {
		    get-section "Available OpenOffice.org applications" | get-table | select "OpenOffice 4.1.7"
		    get-button Fertigstellen | click -metaKeys ""
		}
	    with [get-button "Prevent termination of OpenOffice.org application"  ] {
	    	check // Must be checked for OpenOffice Text plugin
	    	// , so verhindert diese Einstellung, dass das OpenOffice Programm mit Elexis geschlossen wird. 
	    }
	  	take-screenshot "PreferencesTextOpenOffice.png"
		get-tree | select "System/Druckereinstellungen"
		$MsOOOutDir | log
		set-dialog-result Folder $MsOOOutDir		
//		get-button "->" -after [get-label "Drucker mit A4-Papier mit ESR"] | click -metaKeys ""
	    get-editbox -after [get-label "Drucker mit A4-Papier mit ESR"] | set-text PDF
	    get-editbox -after [get-label "Drucker mit A4-Papier standard"] | set-text PDF
	    get-editbox -after [get-label "Drucker mit A5-Papier" ] | set-text PDF
	    get-editbox -after [get-label "Drucker mit Einzelblatteinzug"] | set-text PDF
	  	get-window [ t preferences ] | gen-screenshot [concat $imagesDir "config-MsOO.png" ]
	  	take-screenshot "PreferencesSystemPrinters.png"
		get-tree | select "Datenaustausch/eHC"
	    get-editbox -after [get-label "Standard Ausgabeverzeichnis"] | set-text [concat [get-java-property user.home] "/elexis/eHC/output" ]
	    get-editbox -after [get-label "Standard Eingangsverzeichnis"] | set-text [concat [get-java-property user.home] "/elexis/eHC/input" ]
	  	wait 1000
	  	get-window [ t preferences ] | gen-screenshot [concat $imagesDir "config-eHC.png" ]
		get-button [ t apply_and_close ] | click
	}
}

// Ende
//
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
