--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: text_plugins_common
Element-Type: context
Element-Version: 2.0
Id: _LkBSkBsDEembU9g-6bJhVg
Save-Time: 3/25/21 4:27 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

global [val hilotecOdfOutDir $pdfDir] -override
global [val MsOOOutDir $pdfDir] -override
global [val ConfiguredTextPlugin ""] -override
global [val lowriter "/usr/bin/libreoffice"] -override
global [val oowriter "/opt/openoffice4/program/swriter"] -override
global [val hiloFile [ concat $rcpttDir "hilotec_configured" ] ] -override
global [val hiloVorlagen [ concat $rcpttDir "hilotec_vorlagen" ] ] -override
global [val ooFile [ concat $rcpttDir "medelexis_oo_configured" ] ] -override
global [val vorlagenDir  [concat $rcpttDir "medelexis_openoffice_fenster_rechts/" ] ] -override
global [val vorlagenDirOpenoffice  [concat $rcpttDir "elexis-vorlagen-master/openoffice/" ] ] -override

proc TextPluginSelect [val useTextPlugin hilotec_odf] {
	global [val ConfiguredTextPlugin useTextPlugin] -override
	if [$useTextPlugin | equals hilotec_odf] {
		ConfigureHilotecODF_TextVerarbeitung
	} -else {
		ConfigureMsOO_TextVerarbeitung
	}
}

proc SetupTextPlugins {
	ConfigureMsOO_TextVerarbeitung
	ConfigureHilotecODF_TextVerarbeitung
	ImportHilotecODF_Vorlage
}

proc EnsureLibreOffficIsInstalled {
	if [get-by-os -win false -macosx true -linux false] {
		log "EnsureLibreOffficIsInstalled: Check whether libreoffice ist installed under MacOSX"
		global [val lowriter "/Applications/LibreOffice.app/Contents/MacOS/soffice"] -override
		let [val result [exec-process -command $lowriter -args "--version"]] {
			concat "EnsureLibreOffficIsInstalled: " $lowriter "libreoffice version returned " [$result | get exitCode]
				" out " [$result | get stdout] | log
			$result | get exitCode | equals 0 | assert-true
		}
	} -else {
		if [get-by-os -win false -macosx false -linux true] {
			log "EnsureLibreOffficIsInstalled: Check whether libreoffice ist installed under Linux"
			let [val result [exec-process -command libreoffice -args "--version"]] {
				concat "EnsureLibreOffficIsInstalled: libreoffice version returned " [$result | get exitCode] " out "
					[$result | get stdout] | log
				concat "EnsureLibreOffficIsInstalled: libreoffice version returned " [$result | get exitCode] " out "
				$result | get exitCode | equals 0 | assert-true
				let [val result [exec-process -command which -args libreoffice]] {
					global [val lowriter [invoke-static "org.apache.commons.lang3"
						"org.apache.commons.lang3.StringUtils" chop [$result | get stdout]]] -override
					concat "EnsureLibreOffficIsInstalled: lowriter is now set to: " $lowriter ": done" | log
				}
			}
			log "EnsureLibreOffficIsInstalled: libreoffice ist installed (LINUX)"
		} -else {
			log "EnsureLibreOffficIsInstalled: Check whether libreoffice ist installed under Windows"
			global [val lowriter "C:\\Program Files\\LibreOffice\\program\\swriter.exe"] -override
			get-file [ uri-from-path $lowriter ] | get exists | assert-true -message [ concat "Could not find " $lowriter]
		}
	}
	create-entire-screenshot [concat $imagesDir "EnsureLibreOffficIsInstalled.png"]
}

proc CloseLibreOffice {
	if [get-by-os -win false -macosx true -linux false] {
		concat "CloseLibreOffice macosx " $lowriter | log
		exec-process -command killall -args $lowriter -ignoreExitCode -ignoreStderr
	} -else {
		if [get-by-os -win false -macosx false -linux true] {
			concat "CloseLibreOffice linux " $lowriter | log
			exec-process -command killall -args oosplash -ignoreExitCode -ignoreStderr
		} -else {
			exec-process -command taskkill -args "/IM soffice.bin /F" -ignoreExitCode -ignoreStderr
			exec-process -command taskkill -args "/IM soffice.exe /F" -ignoreExitCode -ignoreStderr
		}
	}
}

CloseLibreOffice // Ensure that we have no LibreOffice process open when running our tests

proc ConfigureHilotecODF_TextVerarbeitung {
	EnsureLibreOffficIsInstalled
	get-preferences-menu | click
	with [get-window [t preferences]] {
		get-tree | select [t Textverarbeitung]
		// Button name various on number of installed text plugins!
		// There replace 0 :, etc by .*
		get-window [t preferences] | gen-screenshot [concat $imagesDir "hilotecODF-select.png"]
		with [get-button [t print_save_letter_extern]] {
			check
		}
		with [get-editbox -after [get-label [t pref_externes_textprogramm]]] {
			set-text [concat [get-user-dir] "/extern"]
		}
		with [get-button [t pref_texte_lokal_editieren]] {
			check
		}
		get-window [t preferences] | gen-screenshot [concat $imagesDir "hilotecODF-config-1.png"]
		get-button ".*Hilotec-OpenDocument" | click
		get-tree | select "Hilotec-OpenDocument"
		with [get-editbox -after [get-label "OpenDocument Editor"]] {
			set-text $lowriter
		}
		with [get-editbox -after [get-label "Argumente zum Drucken"]] {
			set-text [concat "--headless --convert-to pdf --outdir " $hilotecOdfOutDir]
		}
		with [get-editbox -after [get-label "Argumente fuer PDF-Konvertierung"]] {
			set-text [concat "--headless --convert-to pdf --outdir " $hilotecOdfOutDir]
		}
		with [get-editbox -after [get-label "PDF-Konverter"]] {
			set-text $lowriter
		}
		get-button "Wrapper Skript aktivieren" | uncheck
		get-window [t preferences] | gen-screenshot [concat $imagesDir "hilotecODF-config-2.png"]
		get-button [t apply_and_close] | click
	}
	str "ConfigureHilotecODF_TextVerarbeitung done" | write-lines $hiloFile
	if [ get-file $ooFile | get exists | equals true ] {
		get-file $ooFile  | delete-file
	}
}

proc ImportAlleHilotecODF_Vorlagen [val vorlage [concat $vorlagenDir "/openoffice/AUF-Zeugnis.odt"]] {
	if [ get-file $hiloVorlagen | get exists | equals true ] {
		log "ImportAlleHilotecODF_Vorlagen already done"
	} -else {
		ImportHilotecODF_Vorlage  [ concat $vorlagenDir "Tarmedrechnung_EZ.odt" ]
		ImportHilotecODF_Vorlage  [ concat $vorlagenDir "TR44_S1.odt" ]
		ImportHilotecODF_Vorlage  [ concat $vorlagenDir "TR44_S2.odt" ]
		ImportHilotecODF_Vorlage  [ concat $vorlagenDir "Tarmedrechnung_S1.odt" ]
		ImportHilotecODF_Vorlage  [ concat $vorlagenDir "Tarmedrechnung_S2.odt" ] // only hilotec
		ImportHilotecODF_Vorlage  [ concat $vorlagenDirOpenoffice "Privatrechnung_S1.odt" ]
		ImportHilotecODF_Vorlage  [ concat $vorlagenDirOpenoffice "Privatrechnung_S2.odt" ]
		ImportHilotecODF_Vorlage  [ concat $vorlagenDirOpenoffice "Privatrechnung_EZ.odt" ]
		str "ImportAlleHilotecODF_Vorlagen done" | write-lines $hiloVorlagen
	}
}

proc ImportHilotecODF_Vorlage [val vorlage [concat $vorlagenDir "AUF-Zeugnis.odt"]] {
	concat "ImportHilotecODF_Vorlage should import: " $vorlage | log
	get-file $vorlage | get exists | assert-true -message [concat "File " $vorlage " not found"]
	open-window-by-name [t Dokumente_Textvorlagen_Management]
	set-dialog-result File $vorlage
	get-view "Textvorlagen Management" | get-button "Beliebige Vorlage.*importieren" | click
	try -command {
		get-window Systemvorlage | get-button [t yes] | click
	} -catch {
		log "Keine Systemvorlage"
	}
	try -command {
		with [get-window -class TextTemplateImportConflictDialog] {
			get-button "Ersetzen.*" | click
			get-button OK | click
		}
		concat "Vorlage: " $vorlage " existiert bereits, wurde ersetzt" | log
	} -catch {
		log "Vorlage existiert noch nicht"
	}
	OpenAndResetStartPerspektive
}

proc TextVorlagenEntfernen [val name Liste] {
	open-window-by-name [t Textvorlagen_Management]
	get-view [t Textvorlagen_Management] | get-table | select $name -column [t Name_der_Vorlage] | get-menu [t
		"Delete_template"]
}

proc EnsureOpenOfficeIsInstalled {
	if [get-by-os -win false -macosx true -linux false] {
		log "EnsureOpenOffficIsInstalled: Check whether openoffice ist installed under MacOSX"
		global [val oowriter "/Applications/OpenOffice.app/Contents/MacOS/swriter"] -override
		let [val result [exec-process $oowriter "-invisible" "-headless" "-help" -ignoreStderr true ]] {
			concat "EnsureOpenOffficIsInstalled: " $oowriter "openoffice help returned " [$result | get exitCode]
				" out " [$result | get stdout] | log
			$result | get exitCode | equals 0 | assert-true
		}
	} -else {
		if [get-by-os -win false -macosx false -linux true] {
			log "EnsureOpenOffficIsInstalled: Check whether openoffice ist installed under Linux"
			let [val result [exec-process $oowriter "-invisible" "-headless" "-help" -ignoreStderr true ]] {
				concat "EnsureOpenOffficIsInstalled: openoffice help returned " [$result | get exitCode] " out "
					[$result | get stdout] | log
				concat "EnsureOpenOffficIsInstalled: openoffice help returned " [$result | get exitCode] " out "
				$result | get exitCode | equals 0 | assert-true
			}
			log "EnsureOpenOffficIsInstalled: openoffice ist installed (LINUX)"
		} -else {
			log "EnsureOpenOffficIsInstalled: Check whether openoffice ist installed under Windows"
			global [val oowriter "C:\\Program Files (x86)/OpenOffice 4\\program\\swriter.exe"] -override
			get-file [ uri-from-path $oowriter ] | get exists | assert-true -message [ concat "Could not find " $oowriter]
			let [val result [exec-process $oowriter  "-invisible" "-headless" "-help" -ignoreStderr true ] ] {
				concat "EnsureOpenOffficIsInstalled: " $oowriter "openoffice help returned " [$result | get exitCode]
					" out " [$result | get stdout] | log
				$result | get exitCode | equals 0 | assert-true
			}
		}
	}
	create-entire-screenshot [concat $imagesDir "EnsureOpenOffficIsInstalled.png"]
}

proc ConfigureMsOO_TextVerarbeitung {
	EnsureOpenOfficeIsInstalled
	get-preferences-menu | click
	with [get-window [t preferences]] {
		get-tree | select "Textverarbeitung"
		get-button [t print_save_letter_extern] | uncheck // Must be unchecked for OpenOffice Text plugin
		get-button [t pref_texte_lokal_editieren] | uncheck // Must be unchecked for OpenOffice Text plugin
		get-button ".*OpenOffice 3.x" | click
		get-button [t Anwenden] | click
		get-window [t preferences] | gen-screenshot [concat $imagesDir "MsOO-selected.png"]
		get-tree | select "Textverarbeitung/OpenOffice.org"
		with [get-editbox -after [get-label "Application home"]] {
			click-text
			set-text "/opt/openoffice4"
		}
		get-link ".*Define.*" | click-link
		wait 1000 // leave some time to find the app
		with [get-window "OpenOffice.org application"] {
			get-section "Available OpenOffice.org applications" | get-table | select "OpenOffice.*"
			get-window "OpenOffice.*" | gen-screenshot [concat $imagesDir "MsOO-available.png"]
			get-button Fertigstellen | click -metaKeys ""
		}
		with [get-button "Prevent termination of OpenOffice.org application"] {
			check // Must be checked for OpenOffice Text plugin
			// , so verhindert diese Einstellung, dass das OpenOffice Programm mit Elexis geschlossen wird.
		}
		get-window [t preferences] | gen-screenshot [concat $imagesDir "MsOO-configured.png"]
		take-screenshot "PreferencesTextOpenOffice.png"
		get-tree | select "System/Druckereinstellungen"
		$MsOOOutDir | log
		set-dialog-result Folder $MsOOOutDir
		// get-button "->" -after [get-label "Drucker mit A4-Papier mit ESR"] | click -metaKeys ""
		get-editbox -after [get-label "Drucker mit A4-Papier mit ESR"] | set-text PDF
		get-editbox -after [get-label "Drucker mit A4-Papier standard"] | set-text PDF
		get-editbox -after [get-label "Drucker mit A5-Papier"] | set-text PDF
		get-editbox -after [get-label "Drucker mit Einzelblatteinzug"] | set-text PDF
		get-window [t preferences] | gen-screenshot [concat $imagesDir "MsOO-config.png"]
		take-screenshot "PreferencesSystemPrinters.png"
		get-tree | select "Datenaustausch/eHC"
		get-editbox -after [get-label "Standard Ausgabeverzeichnis"] | set-text [concat [get-java-property  "user.home" ]
			"/elexis/eHC/output"]
		get-editbox -after [get-label "Standard Eingangsverzeichnis"] | set-text [concat [get-java-property "user.home" ]
			"/elexis/eHC/input"]
		wait 1000
		get-window [t preferences] | gen-screenshot [concat $imagesDir "MsOO-config-eHC.png"]
		get-button [t apply_and_close] | click
	}
	str "ConfigureMsOO_TextVerarbeitung done" | write-lines $ooFile
	if [ get-file $hiloFile | get exists | equals true ] {
		get-file $hiloFile  | delete-file
	}
}

// Ende
//
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
