--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Preferences
Element-Type: context
Element-Version: 2.0
Id: _tIpJwP9tEeiDKs20GBwclA
Save-Time: 8/14/20 2:45 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc SavePreferencesToFile {
	exec-with-options -command {
	 get-preferences-menu | click
	 t preferences|log
	    // CSV file must be written in two Steps
	 	get-window [ t preferences ] | get-tree | expand-all
		wait 100 	
	  	get-window [ t preferences ] | get-tree | get-table-data | write-csv-file $preferencesCsvFile
		get-window [ t preferences ] | get-button [ t cancel ] | click
	}
}

proc "close-window-if-open" [val windowName] {
	log [concat "close-window-if-open: Must close Window " $windowName]

	try {
		get-window $windowName | close
	}  -error [val errorObj] -catch {
		concat "close-window-if-open: Window " $windowName " not open: "  [$errorObj | get message] | log
	}
}
proc "get-first-preference-item" {
	close-window-if-open [ t preferences ]
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		get-tree | select ".*" | click
		get-tree | get-item -path Bezugskontakt | get-property "getParent().getSelection().TreeItem[0].getText()" | log
		get-tree | get-item -path Bezugskontakt | get-property "getParent().getSelection().TreeItem[0].getText()" -raw
	}
	close-window-if-open [ t preferences ]
}
global [val curPrefix0 "" ] -override
global [val curLevel "-1" ] -override
global [val savedLevel "-1" ] -override
close-window-if-open [ t preferences ]

proc "check-one-preference-item" [val prefName] {
   // prefName as seen in the CSV file
// Todo: Workarounds für
//  * keine rxtxt library gefunden wird /(AbacusJunior) set error message if Log-Eintrag mit java.lang.UnsatisfiedLinkError: no rxtxSerial in java.library.path
//  * GlobalInbox nicht vorhanden (Eurolyser, OK Änderungen nicht akzeptiert, Nur Abbrechen enables
// * HL7 Dateien (Der Wert muss ein vorhandenes Verzeichnis sein.
// * Datenaustausch/Omnivore: Der Wert muss ein vorhandenes Verzeichnis sein.
	global [val curLevel [replaceAll $prefName ",.*" "" | int ] ] -override
	if [ $curLevel | str | matches "0" ] {
		global [val curPrefix0 
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	if [ $curLevel | str | matches "1" ] {
		global [val curPrefix1 
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	if [ $curLevel | str | matches "2" ] {
		global [val curPrefix2 
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	global [val savedLevel $curLevel ] -override
	$curLevel | switch [ case "0" {
		global [val curPrefMenu $curPrefix0 ] -override
	} ]  [ case "1" {
		global [val curPrefMenu [ concat $curPrefix0 "/" $curPrefix1 ] ] -override
	} ]  [ case "2" {
		global [val curPrefMenu [ concat $curPrefix0 "/" $curPrefix1 "/" $curPrefix2 ]] -override
	} ] -default {
		bool false | assert-true -message "Unexecptecd state for curPrefMenu!"
	}  
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		with [get-tree] {
			expand-all | select $curPrefMenu
			global [val curPrefMenuClean [ replaceAll $curPrefMenu "[ äöüéèàç]" "_" ] ] -override
			if [ get-item -path $curPrefMenu | get-property childCount -raw | matches "0" ] {
				global [val  imgName [ 
						concat $imagesDir "preferences/" $curPrefMenuClean ".png"
					] ] -override
			} -else {
				global [val  imgName [
						concat $imagesDir "preferences/"  $curPrefMenuClean "/_"
						[ replaceFirst $curPrefMenuClean -searchPattern "/[^\\/]*$" -replaceString "" ]
						".png"
						] ] -override
				concat "imgName now " $imagesDir | log
			}
			concat "save-screenshot: curPrefMenu: " $curPrefMenu " img: " $imgName | log
			get-window [ t preferences ] | get-object |save-screenshot -out [ replaceAll $imgName "/___" "/" ]
		}
		get-button [ t apply_and_close ] | 
			click
	}
}

proc "visit-all-preferences" [ val addToIgnorePattern "" ] {
	SavePreferencesToFile
	global [val curPrefSection [get-first-preference-item]] -override
	concat "visit-all-preferences having: " [ read-lines $preferencesCsvFile | length ] " items" | log
	read-lines $preferencesCsvFile | foreach [val item] {
		concat "visit-all-preferences checks: " $item " addToIgnorePattern: " $addToIgnorePattern  | log
		if [$item | str | matches [
			concat  "^_indent.*" $addToIgnorePattern] ] {
			concat "Skipping first line and " $addToIgnorePattern | log
		} -else {
			check-one-preference-item $item
		}
	}
}

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
