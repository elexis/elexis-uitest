--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Preferences
Element-Type: context
Element-Version: 2.0
Id: _tIpJwP9tEeiDKs20GBwclA
Runtime-Version: 2.5.2.202109092356
Save-Time: 12/14/21, 11:58 AM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc SavePreferencesToFile {
	exec-with-options -command {
	 get-preferences-menu | click
	 t preferences|log
	    // CSV file must be written in two Steps
	 	get-window [ t preferences ] | get-tree | expand-all
		wait 100
	  	get-window [ t preferences ] | get-tree | get-table-data | write-csv-file $preferencesCsvFile
		get-window [ t preferences ] | get-button [ t cancel ] | click
	}
}

proc "get-first-preference-item" {
	close-window-if-open [ t preferences ]
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		get-tree | select ".*" | click
		get-tree | get-item -path Bezugskontakt | get-property "getParent().getSelection().TreeItem[0].getText()" | log
		get-tree | get-item -path Bezugskontakt | get-property "getParent().getSelection().TreeItem[0].getText()" -raw
	}
	close-window-if-open [ t preferences ]
}
global [val curPrefix0 "" ] -override
global [val curLevel "-1" ] -override
global [val savedLevel "-1" ] -override
close-window-if-open [ t preferences ]

proc "check-one-preference-item" [val prefName] {

   // prefName as seen in the CSV file
// Todo: Workarounds für
//  * keine rxtxt library gefunden wird /(AbacusJunior) set error message if Log-Eintrag mit java.lang.UnsatisfiedLinkError: no rxtxSerial in java.library.path
//  * GlobalInbox nicht vorhanden (Eurolyser, OK Änderungen nicht akzeptiert, Nur Abbrechen enables
// * HL7 Dateien (Der Wert muss ein vorhandenes Verzeichnis sein.
// * Datenaustausch/Omnivore: Der Wert muss ein vorhandenes Verzeichnis sein.
	global [val curLevel [replaceAll $prefName ",.*" "" | int ] ] -override
	concat "check-one-preference-item: " $curLevel " " $prefName | log
	if [ $curLevel | str | matches "0" ] {
		global [val curPrefix0
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	if [ $curLevel | str | matches "1" ] {
		global [val curPrefix1
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	if [ $curLevel | str | matches "2" ] {
		global [val curPrefix2
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	if [ $curLevel | str | matches "3" ] {
		global [val curPrefix3
			[ replaceFirst $prefName ".*," ""] ] -override
	}
	global [val savedLevel $curLevel ] -override
	$curLevel | switch [ case "0" {
		global [val curPrefMenu $curPrefix0 ] -override
	} ]  [ case "1" {
		global [val curPrefMenu [ concat $curPrefix0 "/" $curPrefix1 ] ] -override
	} ]  [ case "2" {
		global [val curPrefMenu [ concat $curPrefix0 "/" $curPrefix1 "/" $curPrefix2 ]] -override
	} ]  [ case "3" {
		global [val curPrefMenu [ concat $curPrefix0 "/" $curPrefix1 "/" $curPrefix2 "/" $curPrefix3 ]] -override
	} ] -default {
		bool false | assert-true -message "Unexecptecd state for curPrefMenu!"
	}
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		with [get-tree] {
			// concat "check-one-preference-item: curPrefMenu is: '" $curPrefMenu "'"| log
			try {
				if [ get-item -path $curPrefMenu | get-property childCount -raw | matches "0" ] {
					global [val  imgName [
							concat $imagesDir "preferences/" $curPrefMenuClean ".png"
						] ] -override
				} -else {
					global [val  imgName [
							concat $imagesDir "preferences/"  $curPrefMenuClean "/_"
							[ replaceFirst $curPrefMenuClean -searchPattern "/[^\\/]*$" -replaceString "" ]
							".png"
							] ] -override
				}
				// concat "check-one-preference-item: imgName now " $imgName | log
				expand-all | select $curPrefMenu
				// concat "check-one-preference-item: selected: '" $curPrefMenu "'"| log
				} -error [val errorObj]  -catch {
					concat "check-one-preference-item: failed selecting: '" $curPrefMenu "' " $errorObj | log
					global [val  imgName [
							concat $imagesDir "preferences/failed/" $curPrefMenu ".png" ] ] -override
					}
			global [val curPrefMenuClean [ replaceAll $curPrefMenu "[ äöüéèàç]" "_" ] ] -override
			global [val  imgName  [ replaceAll $imgName "/___" "/" ] ] -override
			get-window [ t preferences ] | gen-screenshot -out $imgName
		}
		get-button [ t apply_and_close ] | get-property enablement -raw | assert-true -message [ concat "Button apply and close must be enabled for " $prefName ]
		get-button [ t apply_and_close ] | click
	}
	// concat "check-one-preference-item: " $curLevel " " $prefName  " done" | log
}

proc "visit-all-preferences" [ val addToIgnorePattern "" ] {
	concat "visit-all-preferences started addToIgnorePattern: " $addToIgnorePattern | log
	SavePreferencesToFile
	global [val curPrefSection [get-first-preference-item]] -override
	concat "visit-all-preferences read " $preferencesCsvFile " with " [ read-lines $preferencesCsvFile | length ] " lines" | log
	read-lines $preferencesCsvFile | foreach [val line] {
		if [$line | str | matches [ concat  "^_indent.*|" $addToIgnorePattern] ] {
			concat "visit-all-preferences: ignores line '" $line "'" | log
		} -else {
			concat "visit-all-preferences checks line: " $line " addToIgnorePattern: " $addToIgnorePattern  | log
			check-one-preference-item $line
		}
	}
	concat "visit-all-preferences finished addToIgnorePattern: " $addToIgnorePattern  | log
}
close-window-if-open "InfoBox: not proper private key" // missing key


------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
