--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Invoices
Element-Type: context
Element-Version: 2.0
Id: _QPqdkBNIEemmeedSb1JQew
Runtime-Version: 2.4.1.201903190000
Save-Time: 4/23/19 7:35 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "AbrechnungsSystemKonfigurieren" 
	[ val abrSystem  [ t case_KVG ] ] 
	[ val leistungsSystem  [ t TarmedLeistung ] ] 
	[ val abrPrinter [ t Tarmed_Drucker ] ] 
	[ val caseLaw    [ t KVG_Gesetz ] ] 
	[ val newFactor  "0.95" ]
	[ val startDate  "01.01.2018" ] {
	get-preferences-menu | click
	global [ val found_abr_system false ] -override
	with [get-window [ t preferences ]] {
		get-tree | select [ t Abrechnungssysteme ]
		try {
			get-table | get-item -path  $abrSystem | double-click
			// If it is already present, then the double click opened it
		} -catch {
			// else we must add it
			get-label [ t Neu ] | click
		}
		with [get-window [ t Abrechnungssystem ]] {
			get-editbox -after [get-label [ t Name ] ] | set-text $abrSystem
			get-combo -after [get-label [ t Leistungscode_System ] ] | select $leistungsSystem
	        get-combo -after [get-label [ t Standard_Rechnungsausgabe ] ] | select $abrPrinter
	        get-combo -after [get-label [ t Gesetz ] ] | select $caseLaw
			let [ val  nrMultiplikatoren [ get-list | get-property "getItemCount()" -raw ] ] 
				[ val mustMatch [ concat ".*" $startDate ".*" $newFactor ] ]			{
				loop [val idx 0] {
					concat "AbrechnungsSystemKonfigurieren: nrMultiplikatoren ist: " $nrMultiplikatoren " idx " $idx " mustMatch " $mustMatch| log
					try {
						get-window [ t Abrechnungssystem ] | get-list | get-property [ concat "getItems().String[" [ $idx | str ] "]" ] -raw | log
						// failed get-list | get-property [ concat "getItems().String[" 1 "]" ] -raw | log
						get-window [ t Abrechnungssystem ] | get-list | get-property [ concat "getItems().String[" [ $idx | str ] "]" ] | matches $mustMatch | log
						
						get-window [ t Abrechnungssystem ] | get-list | get-property [ concat "getItems().String[" [ $idx | str ] "]" ] -raw| log
						if [ get-window [ t Abrechnungssystem ] | get-list | get-property [ concat "getItems().String[" [ $idx | str ] "]" ] -raw | matches $mustMatch ] {
								log "AbrechnungsSystemKonfigurieren: Found match"
								global [ val found_abr_system true ] -override
						} -else { 
							log "AbrechnungsSystemKonfigurieren: Did not match" 
							if [  $idx | lt $nrMultiplikatoren ] { recur [$idx | plus 1] }
						} 
					} -catch { 
						log "AbrechnungsSystemKonfigurieren: Failed, noMultiplikatoren" 
					}
				}
				if [ $found_abr_system ] {
					concat "AbrechnungsSystemKonfigurieren " $found_abr_system " multi " $mustMatch " already preset" |log		
				} -else {
					concat "AbrechnungsSystemKonfigurieren " $found_abr_system " must add multi" |log		
					get-button [ t hinzufuegen ] | click
					with [get-window  [ t Neuer_Multiplikator ] ] {
			           with [get-editbox -after [get-label [ t Datum ]]] {
			                set-text $startDate
			            }
			            get-editbox -after [get-label [ t Multiplikator ] ] | set-text $newFactor
						gen-screenshot [concat $imagesDir "Abrechnungs_Multiplikator_" $abrSystem "_"  $startDate " " $newFactor ".png"]
						get-button OK | click
					}
				}

			}
	        get-editbox -after [get-label [ t Name ] ] | set-focus
			get-button OK | click
		}
		gen-screenshot [concat $imagesDir "AbrechnungsSystemKonfigurieren_" $abrSystem "_"  $startDate " " $newFactor ".png"]
		get-button [ t apply_and_close ] | click
	}
}

proc "RechnungslisteAnzeigen" [ val status [ t Offen ] ] {
	open-window-by-name [ t Rechnungsliste ]
	with [get-view [ t Rechnungsliste ] ] {
		get-combo -after [get-label [ t RG_Total ]] | select $status
		get-button [ t Liste_neu_einlesen ] | click
	}
}

proc RechnungAusgeben [ val invoiceListViewName [ t Rechnungsliste ] ]
	[ val invoiceId 1 ] 
	[ val status [ t alle_rechnungs_stati ] ] {
	concat "RechnungAusgeben starting: " $invoiceListViewName " invoiceId " $invoiceId | log
	global [val RechnungAusgebenError "0" ] -override
	let [ val logName [ concat "_invoice_" $invoiceId ] ]
		[val nrItemsBefore [ GetNrOfInvoices -status $status ] ] {
		get-eclipse-window | key-type "M1+m" // Maximize
		RechnungslisteAnzeigen $status
		concat "RechnungAusgeben: before " $nrItemsBefore " items"| log
		get-view  $invoiceListViewName | get-table | select  $invoiceId | get-menu -path [ t Rechnung_ausgeben ] | click
		get-eclipse-window | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $logName "_start.png"]
		with [get-window [ t View_Rechnung_ausgeben] ] {
	   		get-combo | select [ t Als_Tarmed_Rechnung_ausdrucken ]
			get-button [ t Mit_ESR ] | check
			get-button [ t Mit_Rechnungsformular ] | check
			get-button [ t Trotzdem_drucken ] | check
			set-dialog-result Folder $pdfDir
			with [get-group [ t Datei_Fuer_TrustCenter ] ] {
				get-button [ t auch_als_XML_speichern ]| check
				get-button [ t Aendern_oder_Verzeichnis ] | click
			}
			global [val RechnungAusgebenError "1" ] -override
			gen-screenshot [concat $imagesDir "RechnungAusgeben_" $logName "_dialog.png"]
			get-button OK | click
		}    
		try {
			with [ get-window [ t Fehler_beim_Drucken ] ] {
			    get-property title -raw | log
				gen-screenshot [concat $imagesDir "RechnungAusgeben_" $logName "_Fehler.png"]
				// bool false | assert-true -message [concat "RechnungAusgeben Fehler beim Drucken von " $logName ]
				get-button "OK" | click
			}
			log "RechnungAusgebe: Fehler beim Drucken umgangen"
		} -error [val errorObj] -catch {
			try {
				get-window [ t Drucken_beendet ]| assert-non-empty
				log "RechnungAusgebe: Kein Fehler beim Drucken. Okay"
				get-window [ t Drucken_beendet ]| gen-screenshot [concat $imagesDir "RechnungAusgeben_" $logName "_beendet.png"]
				get-window [ t Drucken_beendet ]| close
			}
		}
		with [get-view $invoiceListViewName ] {
			get-combo -after [get-label [ t RG_Total ]] | select [ t ausstehend ]
			get-button [ t Liste_neu_einlesen ]  | click
		}
		get-eclipse-window | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $logName "_liste.png"]
		let [val nrItemsAfter [ GetNrOfInvoices -status [ t Offen ] ] ] {
			concat "RechnungAusgeben: " $nrItemsAfter " after have " $nrItemsAfter " items"| log
			$nrItemsAfter | lt $nrItemsBefore | assert-true -message
				[ concat "RechnungAusgeben: After invoicing expected " $nrItemsAfter " items lower than but found " $nrItemsBefore]
		}

		let [ val xmlFile [ GetXmlOfInvoice $invoiceId ] ] {
			concat "RechnungAusgeben " $xmlFile " exists " [ get-file $xmlFile |  get exists]| log
			get-file $xmlFile |  get exists | assert-true
		}
		if [ $RechnungAusgebenError | eq "1" ] {
			bool false | assert-true -message [ concat "RechnungAusgebe: Fehler beim Drucken der Rechnung " $invoiceId  ". Wahrscheinlich kein PDF erstellt"]
		}
		get-eclipse-window | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $logName "_okay.png"]
		concat "RechnungAusgeben finished: " $invoiceListViewName " log " $logName | log
	}
}

proc "CheckTarmedXml"  [ val invoiceId ] [ val searchFor ] {
	let [ val xmlFile [ GetXmlOfInvoice $invoiceId ] ] {
		concat "CheckTarmedXml " $invoiceId " looking for '" $searchFor "'" | log
		FileContainsString $xmlFile -searchFor $searchFor | assert-true
	}
}
proc "GetHighestInvoiceNrOf" [ val status [ t alle_rechnungs_stati ] ] {
	global [val highestInvoiceNr 0 ] -override

	RechnungslisteAnzeigen -status $status
	with [get-view [ t Rechnungsliste ] ] {
		loop [val idx 0] {
		get-view [ t Rechnungsliste ] | get-table | get-items | foreach [val item]  {
			if [ $item | get-property caption -raw | gt $highestInvoiceNr ]{
					// concat "GetHighestInvoiceNrOf Higher " [ $item | get-property caption -raw ] | log
		    		global [val highestInvoiceNr [  $item | get-property caption -raw ] ] -override
				}
			}
		}
	}
	
	concat "GetHighestInvoiceNrOf set highestInvoiceNr to: " $highestInvoiceNr | log
	$highestInvoiceNr | str
}

proc "GetNrOfInvoices" [ val status [ t alle_rechnungs_stati ] ] {
	RechnungslisteAnzeigen -status $status
	let [ val textContent [ get-view  [ t Rechnungsliste ] | get-editbox -after [get-label [ t Rechnungen_in_Liste ] ] | get-property text -raw ] ] {
		// concat "GetNrOfInvoices got : " $textContent " as int " [ $textContent | int ] | log
		 $textContent | int
	}
}

proc "GetXmlOfInvoice" [ val invoiceId 1] {
	concat $pdfDir $invoiceId ".xml"
}

proc "CheckTarmedFallVerrechnen"   [ val invoiceId 0 ] {
	if [ $invoiceId  | eq 0 ] {
		global [val CheckTarmedFallId [ GetNrOfInvoices -status [ t ausstehend ] ] ] -override
	} -else {
		global [val CheckTarmedFallId $invoiceId] -override
	}

	// Items added/checked must be the same in TarmedFallVerrechnen and CheckTarmed Fall
	CheckTarmedXml $CheckTarmedFallId LOSARTAN
	CheckTarmedXml $CheckTarmedFallId Metoprolol
	CheckTarmedXml $CheckTarmedFallId "code=\"10.0010\"" // "Klinische Geruchsprüfung, beidseitig" // 10.0010
	//  00.0010 00.0015 00.0026 00.0030
	CheckTarmedXml $CheckTarmedFallId "code=\"00.0010\"" //  "Konsultation, erste 5 Min. (Grundkonsultation)" // BLock Kons plus (KVG)
	CheckTarmedXml $CheckTarmedFallId "code=\"00.0015\"" // "Zuschlag für hausärztliche Leistungen in der Arztpraxis"
	CheckTarmedXml $CheckTarmedFallId "code=\"00.0026\"" // "Konsultation bei Personen über 6 Jahren und unter 75 Jahren mit einem erhöhten Behandlungsbedarf, jede weiteren 5 Min."
	CheckTarmedXml $CheckTarmedFallId "code=\"00.0030\"" // "Konsultation, letzte 5 Min. (Konsultationszuschlag)"
	//  "23.0010" ] // Untersuchung der Mammae KVGSA
	CheckTarmedXml $CheckTarmedFallId "code=\"23.0010\"" // "Untersuchung der Mammae"
	CheckTarmedXml $CheckTarmedFallId "<invoice:diagnosis type=\"by_contract\" code=\"A3\" />"
	concat "CheckTarmedFallVerrechnen " $CheckTarmedFallId " erfolgreich" | log
}

// Ende

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
