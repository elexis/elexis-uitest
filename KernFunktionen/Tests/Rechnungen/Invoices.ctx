--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Invoices
Element-Type: context
Element-Version: 2.0
Id: _QPqdkBNIEemmeedSb1JQew
Runtime-Version: 2.4.1.201903190000
Save-Time: 4/6/19 12:18 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "AbrechnungsSystemKonfigurieren" {
	get-preferences-menu | click
	with [get-window [ t preferences ]] {
		get-tree | select Abrechnungssysteme
		get-table | get-item -path KVG | double-click
		with [get-window Abrechnungssystem] {
		get-editbox -after [get-label Name] | set-focus
		get-combo -after [get-label "Leistungscode-System"] | select TarmedLeistung
		get-button "Hinzufügen..." | click
		with [get-window "Neuer Multiplikator"] {
			get-editbox | set-text "0.89"
		// key-type "TRAVERSE_TAB_PREVIOUS"
		// TODO: Howto set required start date?
		   // get-control Any -index 4 | set-text "01.02.2018"
			// get-editbox -after [get-label "Start Datum"] | set-text "01.01.2018"
			// Changes the label "Bitte geben Sie das Datum ein, ab dem der neue Multiplikator gilt" not the date!!!
			get-button OK | click
		}
		get-button OK | click
		}
		get-button [ t apply_and_close ] | click
	}
}

proc RechnungAusgeben [ val invoiceListViewName "Rechnungsliste.*beta.*" ]
	[val betrag ".*" ] [val patient ".*"]  {
	concat "RechnungAusgeben starting: " $invoiceListViewName " betrag " $betrag " pat " $patient | log
	open-window-by-name $invoiceListViewName
	let [val nrItemsBefore [ GetNrOfInvoices -status [ t Offen ] ] ] {
		get-eclipse-window | key-type "M1+m" // Maximize
		concat "RechnungAusgeben: before " $nrItemsBefore " items"| log
		get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp
		 -column "Patient"  -value [ concat ".*" $patient ".*"]  | log
		get-view  $invoiceListViewName | get-table | select ".+" | get-menu -path "Ausgeben..." | click
		get-eclipse-window | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $patient "_start.png"]
		with [get-window "Rechnung ausgeben"] {
	   		get-combo | select "Als Tarmed-Rechnung ausdrucken"
			get-button "Mit ESR" | check
			get-button "Mit Rechnungsformular" | check
			get-button "Bei fehlenden administrativen Daten trotzdem drucken" | check
			with [get-group "Datei für TrustCenter" ] {
				get-button "auch als XML für TrustCenter speichern" | check
				get-button "Ändern|Verzeichnis:" | click
			}
			set-dialog-result Folder $pdfDir
			gen-screenshot [concat $imagesDir "RechnungAusgeben_" $patient "_dialog.png"]
			get-button OK | click
		}
		try {
			with [ get-window "Fehler beim Drucken" ] {
				gen-screenshot [concat $imagesDir "RechnungAusgeben_" $patient "_Fehler.png"]
				get-button "OK" | click
			}
			log "RechnungAusgebe: Fehler beim Drucken umgangen"
		} -catch {
			log "RechnungAusgebe: Kein Fehler beim Drucken. Okay"
			get-window "Drucken beendet" | assert-non-empty
			get-window "Drucken beendet" | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $patient "_beendet.png"]
			get-window "Drucken beendet" | close
		}
		with [get-view $invoiceListViewName ] {
			get-combo -after [get-label [ t RG_Total ]] | select [ t ausstehend ]
			get-button [ t Liste_neu_einlesen ]  | click
		}
		get-eclipse-window | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $patient "_liste.png"]
		let [val nrItemsAfter [ GetNrOfInvoices -status [ t Offen ] ] ] {
			concat "RechnungAusgeben: after have " $nrItemsAfter " items"| log
			$nrItemsAfter | lt $nrItemsBefore | assert-true -message
				[ concat "RechnungAusgeben: After invoicing expected " $nrItemsAfter " items lower than but found " $nrItemsBefore]
		}
	}
	let [ val xmlFile [ GetXmlOfInvoice [GetNrOfInvoices -status [ t ausstehend ]  ] ]] {
		concat "RechnungAusgeben " $xmlFile " exists " [ get-file $xmlFile |  get exists]| log
	}
	get-eclipse-window | gen-screenshot [concat $imagesDir "RechnungAusgeben_" $patient "_okay.png"]
	concat "RechnungAusgeben finished: " $invoiceListViewName " betrag " $betrag " pat " $patient | log
}
proc RechnungAusgeben2 {
	// get-row-header  is not yet defined in 2.3.0
	// get-view  $invoiceListViewName | get-table | get-row-header | log
	get-view  $invoiceListViewName | get-table | get-table-data | log
	log Duck
	get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp  -column "Patient"  -value ".*Duck.*" |log
	// get-column-header not yet defined in 2.3.0
	get-view  $invoiceListViewName | get-table | get-column-header | log
	get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp
	 -column "Patient"  -value ".*Duck.*"  | log
	get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp
	 -column "Patient"  -value ".*Duck.*"
//	get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp
//		 -column "Patient"  -value ".*Duck.*" | get-property "columns[8]" | log  
log Rechnungsliste	  
	get-view  $invoiceListViewName | get-table | get-cell -row 1 -column 8 | log
	get-view  $invoiceListViewName | get-table | get-cell -row 1 -column 1  | log	   
	log second 
	get-view  $invoiceListViewName | get-table | get-cell -row 1 -column 1 | get-property text   | log	
	 	log sss
	get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp
	 -column "Patient"  -value ".*Duck.*" | select-columns "RG Nr" "Patient" | log
	 	
	get-view  $invoiceListViewName | get-table | get-table-data | select-columns "RG Nr" "Patient" | log
	get-view  $invoiceListViewName | get-table | get-table-data | select-columns "RG Nr" "Patient" |
		 write-csv-file [ concat  [get-user-dir] "/rcptt/file1.csv"	]
	get-view  $invoiceListViewName | get-table | get-table-data | select-rows  -match regexp
	 -column "Patient"  -value ".*Duck.*"  |   select-columns "RG Nr" "Patient" |
		 write-csv-file [ concat  [get-user-dir] "/rcptt/file2.csv" ]
	with [get-view  $invoiceListViewName | get-table] {
	// If you passs betrag 60.00 then it will show up down here as 60.0
		get-item  -column "Patient"  -path [ concat $patient ".*"]   | get-property "columns[3]" -raw true | log
		get-item  -column "Patient"  -path [ concat $patient ".*"]   | get-property "columns[8]" -raw true | log
		get-item  -column "Patient"  -path [ concat $patient ".*"]   | get-property "columns[3]" | matches [ concat $patient ".*"]  | verify-true
		get-item  -column "Patient"  -path [ concat $patient ".*"]  | get-property "columns[8]" |  matches $betrag | verify-true
	}
	with [get-view  $invoiceListViewName | get-table] {
	// If you passs betrag 60.00 then it will show up down here as 60.0
		get-item -path 18 | get-property "columns[3]" | matches [ concat $patient ".*"]  | verify-true
		get-item -path 18 | get-property "columns[8]" | matches $betrag | verify-true
	   }
	   /*
		 get-item -path 18 | log
		 get-item -path [ concat ".*" $patient ".*" ] | log
 		get-item -path  [ concat ".*" $patient ".*" ]  | get-property "columns[3]" | matches [ concat $patient ".*"]  | verify-true
		 
	} */
	// get-view $invoiceListViewName | get-table | select 18 | get-menu -path "Ausgeben..." | click
	log zwer
}

proc "CheckTarmedXml"  [ val invoiceId ] [ val searchFor ] {
	let [ val xmlFile [ GetXmlOfInvoice $invoiceId ] ] {
		concat "CheckTarmedXml " $invoiceId " looking for '" $searchFor "'" | log
		FileContainsString $xmlFile -searchFor $searchFor | assert-true
	}
}

proc "GetNrOfInvoices" [ val status [ t alle_leistungen ] ] {
	open-window-by-name [ t Rechnungsliste ]
	with [get-view [ t Rechnungsliste ] ] {
		get-combo -after [get-label [ t RG_Total ]] | select $status
		get-button [ t Liste_neu_einlesen ] | click
	}
	let [ val textContent [ get-view  [ t Rechnungsliste ] | get-editbox -after [get-label [ t Rechnungen_in_Liste ] ] | get-property text -raw ] ] {
		// concat "GetNrOfInvoices got : " $textContent " as int " [ $textContent | int ] | log
		 $textContent | int
	}
}

proc "GetXmlOfInvoice" [ val invoiceId 1] {
	concat $pdfDir $invoiceId ".xml"
}
// Ende

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
