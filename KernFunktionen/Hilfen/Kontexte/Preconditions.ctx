--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Preconditions
Element-Type: context
Element-Version: 2.0
Id: __8MAcP49EeiuqdAcgkHVvQ
Runtime-Version: 2.5.2.202204202359
Save-Time: 7/5/22, 5:18 PM

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Checks some preconditions for Running RCPTT tests for Elexis.

Defines the following global variables:

* currentUniqPatient
* currentUniqUser
* currentUniqMpa
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

// Fail early when User.home with space in it. Some scripts (e.g. backup sql) will not work (at least under windows)
if [ get-java-property "user.home" | matches ".* .*" | eq true ] {
	concat "User home directory may not contain a space" | log
	get-java-property "user.dir" | matches ".* .*"  | eq true | verify-false
} -else {
	concat "Check passed: get-java-property user.home -> " [ get-java-property "user.home" ] " does not contain a space" | log
}
// output some utility information uisng procedures from ecl_helper 
log -message [ concat "Value of environmnet variable PATH is: " [ get-env PATH] ]
log -message [ concat "Value of get-seconds is: " [ get-seconds ] ]
log -message [ concat "Value of Java property ch.elexis.password is: " [ get-java-property ch.elexis.password] ]
log -message [ concat "Value of Locale.getDefault is: " [ get-default-locale ] ]
log -message [ concat "Value of get-user-dir is: " [ get-user-dir ] ]
concat "a"[  safe-get-java-property THIS_ENV_VARIABLE_SHOULD_NOT_EXIST ] "b" | eq "ab" | verify-true 
concat "a"[  get-env "THIS_ENV_VARIABLE_SHOULD_NOT_EXIST" ] "b" |  eq "ab" | verify-true 
log --message "Checked failure"
// log -message [ concat "Value of get-workspace-location is: " [ get-workspace-location ] ]
try {
	log -message "Check Preferences Window"
	get-window [ t preferences ] | get-button [ t cancel ] | click
} -catch {
	// Verify that the window was missing (and not some other problem)
	verify-error -command {get-window [ t preferences ]}
}


// Some Hints from http://h2database.com/html/tutorial.html#tutorial_starting_h2_console
// http://central.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar
// java -classpath ~/elexis/rcptt/h2-1.4.200.jar org.h2.tools.RunScript -script locale.sql -url jdbc:h2:~/elexis/demoDB/db -user sa  -showResults
// Save to test.zip
// java -classpath ~/elexis/rcptt/h2-1.4.200.jar org.h2.tools.Script -url jdbc:h2:~/elexis/demoDB/db -user sa -script test.zip -options compression zip

// Restore from test.zip
// java -classpath ~/elexis/rcptt/h2-1.4.200.jar org.h2.tools.RunScript -url jdbc:h2:~/elexis/demoDB/db -user sa -script test.zip -options compression zip

// RunScript runs a SQL script against a database. 
 
global [val h2Jar	   [ concat $rcpttDir "h2-1.4.200.jar"] ]
global [val dumpFile	[ concat $rcpttDir "dump.sql.zip"] ]
global [val sqlCmdFile	  [ concat $rcpttDir "commands.sql"] ]
global [val jdbcConnection  "Unknown jdbcConnection"]

if [ safe-get-java-property "elexis-run-mode" |  eq "RunFromScratch" ] {
	log "Running from Scratch: Don't know how to get use jdbcConnection"
} -else {
	try {
		if [ safe-get-java-property "ch.elexis.dbSpec" | matches "jdbc:.*" ] {
			log "Found JDBC"
			global [val jdbcConnection  [ safe-get-java-property "ch.elexis.dbSpec" ] ] -override
		} -else {
			concat "file:" [ get-user-dir ] "/demoDB/db.h2.db" | get-file | get exists | verify-true
			global [val jdbcConnection  [ concat "jdbc:h2:" [ get-user-dir ] "/demoDB/db;AUTO_SERVER=TRUE"] ] -override
		}
	} -catch {
		log "No dbSpec specified"
	}
}

proc "exec-h2-script"  [val scriptName  "org.h2.tools.Script"]
		// For unknown reason statement fails for param = 'locale' or param like 'locale'
			   [val sqlCommand [concat "select wert from  config where param like '%locale';" ] ]
			   [val jdbc $jdbcConnection] {
	concat "jdbcConnection: " $jdbcConnection | log
	concat "executing " [ str $sqlCommand  ] " via " [str $sqlCmdFile ] | log
  // TODO: When RCPTT > 2.3.0 is available add | find-all  "-->. to select only result lines
	exec-process "java" "-classpath" $h2Jar $scriptName"-url"  [concat "'" $jdbc "'"] "-user" "sa" "-script" $sqlCmdFile
	// "-showResults"
}

/** (Only for h2 at the moment)
*   Creates a dump. When running headless it fails with log entries like
*   org.h2.jdbc.JdbcSQLException: Verbindung ist unterbrochen: "java.net.ConnectException: Verbindungsaufbau abgelehnt (Connection refused):
*	  144.76.170.222:45657" Connection is broken: "java.net.ConnectException:
*	  Verbindungsaufbau abgelehnt (Connection refused): 144.76.170.222:45657" [90067-197]
*/
proc "create-backup-sql" [val zipFile $dumpFile] 
				 [val jarFile $h2Jar]
				 [val jdbc  [ concat "jdbc:h2:~/elexis/h2_elexis_rcptt_" $defaultLanguage "/db;AUTO_SERVER=TRUE" ] ] {
	if [ safe-get-java-property "elexis-run-mode" |  eq "RunFromScratch" ] {
		log "I do not know how to access the JDBConnection when Running from Scratch"
	} -else {
		if [ safe-get-java-property "ch.elexis.dbFlavor" | eq "h2" ] {
			if [ get-by-os  -win true -macosx false -linux false ] {
				concat "java" " " "-classpath" " " $jarFile " " "org.h2.tools.Script"
				" " "-url" " " $jdbc " " "-user" " " "sa" " " "-script" $zipFile " " "-options" " " "compression" " " "zip" | log
				// exec-process "java" "-classpath" $jarFile "org.h2.tools.Script"
				// "-url" $jdbc "-user" "sa" "-script" $zipFile "-options" "compression" "zip"
				concat "Dump to " $zipFile " skipped under windows" | log
			} -else {
				concat "/usr/bin/env" " java" " -classpath " $jarFile " org.h2.tools.Script"
				" -url " $jdbc " -user" " sa" " -script " $zipFile " -options" " compression" " zip" | log
				exec-process "/usr/bin/env" "java" "-classpath" $jarFile "org.h2.tools.Script"
				"-url" $jdbc "-user" "sa" "-script" $zipFile "-options" "compression" "zip"
			}
		} -else {
			concat "create-backup-sql unsupported flavor " [ safe-get-java-property "ch.elexis.dbFlavor" ] | log
		}
	}
}

// Create some uniq variable to ease running unit tests several time with the same database
global [val currentUniqPatient "FirstValue" ]
global [val currentUniqPatient [ concat "Patient_" [ get-seconds | str ] ] ]  -override // -override must be at the end
global [val currentUniqUser [ concat "Arzt" [ get-seconds | str ] ] ]
global [val currentUniqMpa [ concat "MPA_" [ get-seconds | str ] ] ]

// Der Verantwortliche Arzt ist bei RunFromScratch James Bond,
// bei der DemoDB aber Dr. Test Alfred, also müssen wir uns mit einem regulären Ausdruck behelfen
// Bei first we only get test // ".*Bond James.*|.*Test Alfred.*|.*test.*
global [val VerantwortlicherArzt ".+" ]

log -message [ concat "Workdir is " [ get-workspace-location ]]
log -message "Error Message. Is it correctly sorted ?" -severity error
log -message "warning Message. This should not appear in the preconditions_log.csv"	-severity warning
log -message "info Message. Is it correctly sorted ?" -severity info

get-log -levels info -levels error | as-table-data | sort-by dateText | write-csv-file [ concat $resultsDir "preconditions_log.csv" ]

concat "Preconditions passed. currentUniqName is: " $currentUniqPatient | log

proc "features-to-csv" {
	list-features | write-lines [ concat  $resultsDir "features.csv" ]
	concat "wrote csv: " $resultsDir "features.csv"  | log
}


proc "installed-units-to-csv" {
	list-install-units | write-lines [ concat  $resultsDir "installed-units.csv" ]
	concat "wrote csv: " $resultsDir "installed-units.csv"  | log
}

proc "Statusinformationen-Open" {
	try {
		concat "Statusinformationen-Open: " [ get-window ".*" | get-text ] | log
		get-window Statusinformationen | get-property enablement | equals true
		log "window Statusinformationen open"
		bool true
	} - catch {
		log "window Statusinformationen closed"
		bool false
	}
}

proc "ensure-loinc-codes-loaded" {
	log "vor Ensure-Loinc-Codes-loaded"
	open-window-by-name [ t daten_artikel ]
	open-window-by-name "Codes/Codes" // Force reading of loinc
	loop {
	    if [Statusinformationen-Open] {
		        wait 2000
		        recur
	    }
	}
	wait 1000
	HandleMissingInvoiceSystems
	log "nach Ensure-Loinc-Codes-loaded"
}


// Ende
//

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
