--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: ecl_helpers
Element-Type: context
Element-Version: 2.0
Id: _Cr4zgP0jEeiNqfuAT0PA2A
Runtime-Version: 2.4.1.201903190000
Save-Time: 4/18/19 9:11 PM

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Here you find some ECL helper functions to solve often used problems.
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "get-env" [val name] {
		invoke-static "org.eclipse.rcptt.util" "java.lang.System" getenv $name
}
proc "pwd" {
  get-java-property "user.dir"
}

proc "get-default-locale" {
	invoke-static "org.eclipse.rcptt.util" "java.util.Locale" getDefault
}

/*
global [val today [ invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now | get-object | invoke toString  ] ]
global [val today [ invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now | invoke format ] ]
concat "Today is " $today | log
invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now | replaceAll -searchPattern "-" -replacePattern "." | log
// invoke-static java.time.LocalDate.now().minusDays(1).format(java.time.format.DateTimeFormatter.ISO_DATE).replaceAll("-", "."))
*/

proc "get-user-dir" {
	if [ get-by-os  -win true -macosx false -linux false ] {
		global [val myUserDir [ concat  [get-java-property user.home] "/elexis" | str ] ] -override
		// concat "global1 myUserDir: " $myUserDir |log
		global [val myUserDir [ replaceAll  -replaceString  "/" -searchPattern  "C:" -inString $myUserDir] ] -override
		global [val myUserDir [ replaceAll  -replaceString  "/" -searchPattern  "\\\\" -inString $myUserDir] ] -override
		// concat "global3 myUserDir: " $myUserDir |log
		global [val myUserDir [ replaceAll  -replaceString  "\\\\ " -searchPattern  " " -inString $myUserDir] ] -override
		concat "get-user-dir return: " $myUserDir |log
		$myUserDir | str
	} -else {
		invoke-static -pluginId ch.elexis.core.data -className ch.elexis.core.data.activator.CoreHub -methodName getWritableUserDir
	}
}
proc "safe-get-java-property" [val name] {
	try {
		log -message [ concat "Value of Java property " $name " is: " [ get-java-property $name ] ]
		get-java-property $name
	} -catch {
		log [ concat "No such java-property: " $name ]
		""
	}
}

proc "get-seconds" {
	 invoke-static "org.eclipse.rcptt.util" "java.lang.System" currentTimeMillis | div 1000
}

/**
 * @input: inString a string
*/
proc "replaceFirst" [ val inString ] [ val searchPattern ] [ val replaceString] {
	$inString | invoke replaceFirst $searchPattern $replaceString
}
// replaceFirst "Welcome to Tutorialspoint.com" "(.*)Tutorials(.*)" "AMROOD" | log

proc "replaceAll" [ val inString ] [ val searchPattern ] [ val replaceString] {
	$inString | invoke replaceAll $searchPattern $replaceString
}


proc "FileContainsString"  [ val fileName ] [ val searchFor  ] {
	let [ val result [ exec-process "grep" $searchFor $fileName -ignoreExitCode ] ] {
		concat "FileContainsString " $fileName " returned " [ $result | get  exitCode ] | log
		$result | get  exitCode | equals 0 | bool
	}
}

proc "elexisLogMayNotContain"  [ val searchFor  ] {
 	FileContainsString -fileName [ concat [ get-user-dir] "/logs/elexis-3.log" ] -searchFor $searchFor | not | assert-true
}

elexisLogMayNotContain "java.lang.OutOfMemoryError"

/**
 * Somehow this does not work, wait-until-eclipse-is-ready never returns
 */
proc "RestartElexis" {
	concat "RestartElexis: Run-Mode is " [ safe-get-java-property "elexis-run-mode" ] | log
	wait-until-eclipse-is-ready
	if [ safe-get-java-property "elexis-run-mode" |  eq "RunFromScratch" ] {
		log "Skipping restart as RunFromScratch" // We cannot restart Elexis without loosing all content
	} -else {
		log "RestartElexis: Trying to restart Elexis"
		restart-aut
		log "RestartElexis: Calling wait-until-eclipse-is-ready"
		wait-until-eclipse-is-ready
		log "RestartElexis successfull"
	}
}
global [ val resultsDir   [ concat  [ pwd ]  "/../results/"] ]
global [ val translations [ read-properties -uri [concat "file:" [get-user-dir] "/rcptt/translations.properties"]]]
global [ val imagesDir	[ concat $resultsDir "images/" ] ]
global [ val pdfDir	[ concat $resultsDir "pdf/" ] ]
global [ val preferencesCsvFile [ concat  $resultsDir "preferences.csv" ] ]
global [ val viewsCsvFile	   [ concat  $resultsDir "views.csv" ] ]
concat "get-default-locale returns: " [get-default-locale] |log
concat "get-user-dir returns: " [get-user-dir] |log
concat "user.language returns: " [ get-java-property "user.language" "dummy" ]  |log
global [ val defaultLanguage [ get-java-property "user.language" "de" ] ]
concat "defaultLanguage is now: " $defaultLanguage| log
$translations | get "de.open"| eq "Öffnen" | verify-true
proc "t" [val key] [val language $defaultLanguage] {
	try {
		// concat "Searching: " $language "." $key | log
		$translations | get [ concat $language "." $key] 
		} -catch {
		concat "Unable to fetch key " [ concat $language "." $key] " in translation.properties"  | log -severity Error
		bool false
	}
}
t "open" "de" | eq "Öffnen" | verify-true
t "open" "fr" | eq "Ouvrir" | verify-true

global [ val praxisProperties [ read-properties -uri [concat "file:" [get-user-dir] "/rcptt/praxis_" $defaultLanguage ".properties"]]]

proc "GetPraxisProperty" [val key]  {
	try {
		// concat "Searching: " $language "." $key | log
		$praxisProperties | get $key
		} -catch {
			concat "Unable to fetch key " $key " in praxis.properties"  | log -severity Error
			concat ""
	}
}

proc handleResetPerspectiveDialog {
	try {
		concat "handleResetPerspectiveDialog via "  [ t reset_perspective ] " and "  [ t btn_reset_perspective ]  | log
		get-window [ t reset_perspective ] | get-button [ t btn_reset_perspective ]  | click
		log "handleResetPerspectiveDialog done"
	} -catch {
		log "handleResetPerspectiveDialog failed"
	}
}
proc resetPerspective {
// get-button "Perspektive zurücksetzen" | click
// get-window "Perspektive zurücksetzen" | get-button "Reset Perspective" | click
	if [ get-button [ t reset_perspective ] | get-property enablement -raw | equals true ] {
		get-button [ t reset_perspective ] | click
		if [ get-button [ t reset_perspective ]  | get-property enablement | equals true ] {
			get-menu -path [ t menu_reset_perspective ] | click
		}
		handleResetPerspectiveDialog
	} -else {
		log "Button reset_perspective is disabled"
	}
}

proc OpenAndResetStartPerspektive {
	try {
		if [ get-button [ t btn_start_perspective ] | get-property enablement -raw | equals true ] {
			get-button [ t btn_start_perspective ] | click
			}
		} -error [val errorObj] -catch {
			// Seen when running ImportSwissbase with french Elexis
			concat "Errror " $errorObj "in btn_start_perspective" | log
			set-dialog-result File "/dummy"
	}
	handleResetPerspectiveDialog
	resetPerspective
}

/**
 * Logs and creates a snapshot of the passed graphical object
 */
proc "gen-screenshot" [ val parent -input ] [ val out [concat $imagesDir "dest.png"] ] {
	$parent | get-object | save-screenshot $out
	concat "gen-screenshot: " $out | log
}

//
// Ende

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
