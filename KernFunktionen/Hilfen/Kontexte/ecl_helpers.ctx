--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: ecl_helpers
Element-Type: context
Element-Version: 2.0
Id: _Cr4zgP0jEeiNqfuAT0PA2A
Save-Time: 11/20/20 12:16 PM

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Here you find some ECL helper functions to solve often used problems.
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "get-env" [val name] {
		invoke-static "org.eclipse.rcptt.util" "java.lang.System" getenv $name
}
proc "pwd" {
  get-java-property "user.dir"
}
proc "get-default-locale" {
	invoke-static "org.eclipse.rcptt.util" "java.util.Locale" getDefault
}

global [ val today [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val tomorrow [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "+1" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val yesterday [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "-1" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val aWeekAhead [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "+7" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val aWeekAgo [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "-7" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
concat "today ist " $today " tomorrow " $tomorrow " yesterday: " $yesterday
	 " aWeekAhead: " $aWeekAhead  " aWeekAgo: " $aWeekAgo | log

concat "user.home: " [get-java-property user.home]  ": getWritableUserDir returns: " [ invoke-static -pluginId ch.elexis.core.data -className ch.elexis.core.data.activator.CoreHub -methodName getWritableUserDir ] | log

proc "get-user-dir" {
	if [ get-by-os  -win true -macosx false -linux false ] {
		global [val myUserDir [ concat  [get-java-property user.home] "/elexis" | str ] ] -override
		global [val myUserDir [ replaceAll  -replaceString  "/" -searchPattern  "\\\\" -inString $myUserDir] ] -override
		global [val myUserDir [ replaceAll  -replaceString  "\\\\ " -searchPattern  " " -inString $myUserDir] ] -override
		$myUserDir | str
	} -else {
		invoke-static -pluginId ch.elexis.core.data -className ch.elexis.core.data.activator.CoreHub -methodName getWritableUserDir
	}
}
proc "safe-get-java-property" [val name] {
	try {
		log -message [ concat "Value of Java property " $name " is: " [ get-java-property $name ] ]
		get-java-property $name
	} -catch {
		log [ concat "No such java-property: " $name ]
		""
	}
}

proc "get-seconds" {
	 invoke-static "org.eclipse.rcptt.util" "java.lang.System" currentTimeMillis | div 1000
}

/**
 * @input: inString a string
*/
proc "replaceFirst" [ val inString ] [ val searchPattern ] [ val replaceString] {
	$inString | invoke replaceFirst $searchPattern $replaceString
}
// replaceFirst "Welcome to Tutorialspoint.com" "(.*)Tutorials(.*)" "AMROOD" | log

proc "replaceAll" [ val inString ] [ val searchPattern ] [ val replaceString] {
	$inString | invoke replaceAll $searchPattern $replaceString
}


proc "FileContainsString"  [ val fileName ] [ val searchFor  ] {
	if [ get-by-os  -win true -macosx false -linux false ] {
		log "FileContainsString ignored on windows"
		// We ignore this command on windows, as we grep is not installed by default on Windows
		bool false
	} -else {
		if [ get-file $fileName  | get exists ] {
			let [ val result [ exec-process "grep" $searchFor $fileName -ignoreExitCode true  ] ] {
				concat "FileContainsString " $fileName " returned " [ $result | get  exitCode ] | log
				$result | get  exitCode | equals 0 | bool
			}
		} -else {
			bool false
		}
	}
}

proc "elexisLogMayNotContain"  [ val searchFor  ] {
	FileContainsString -fileName [ concat [get-java-property user.home] "/elexis/logs/elexis-3.log" ] -searchFor $searchFor | not | assert-true
}

elexisLogMayNotContain "java.lang.OutOfMemoryError"

/**
 * Somehow this does not work, wait-until-eclipse-is-ready never returns
 */
proc "RestartElexis" {
	concat "RestartElexis: Run-Mode is " [ safe-get-java-property "elexis-run-mode" ] | log
	trace "RestartElexis"
	if [ safe-get-java-property "elexis-run-mode" |  eq "RunFromScratch" ] {
		log "Skipping restart as RunFromScratch" // We cannot restart Elexis without loosing all content
	} -else {
		log "RestartElexis: Trying to restart Elexis"
		restart-aut
		wait-until-eclipse-is-ready
		log "RestartElexis successfull"
	}
}
// global [ val resultsDir [ concat [ get-env PWD ] "/../results/"] ]
global [ val resultsDir [ concat [pwd ] "/../results/"] ]
concat "translations_de uri is: " [concat [get-java-property user.home] "/elexis//rcptt/translations_de.properties" ] | log

global [ val translations [ map
	[ entry de [ read-properties -uri [concat [get-java-property user.home]"/elexis/rcptt/translations_de.properties" ] ] ]
	[ entry fr [ read-properties -uri [concat [get-java-property user.home] "/elexis//rcptt/translations_fr.properties" ] ] ]
] ]

global [ val imagesDir	[ concat $resultsDir "images/" ] ]
global [ val pdfDir	[ concat $resultsDir "pdf/" ] ]
global [ val preferencesCsvFile [ concat  $resultsDir "preferences.csv" ] ]
global [ val viewsCsvFile	   [ concat  $resultsDir "views.csv" ] ]
concat "get-env HOME returns: " [get-env HOME ] |log
concat "resultsDir returns: " $resultsDir |log
concat "get-default-locale returns: " [get-default-locale] |log
concat "get-user-dir returns: " [get-user-dir] |log
concat "user.language returns: " [ get-java-property "user.language" "dummy" ]  |log
global [ val defaultLanguage [ get-java-property "user.language" "de" ] ]
concat "defaultLanguage is now: " $defaultLanguage| log
str "Created eHC/input by RCPTT" | write-lines [ concat [get-user-dir] "/elexis/eHC/input/dummy_input.txt" ]
str "Created eHC/output by RCPTT" | write-lines [ concat [get-user-dir] "/elexis/eHC/output/dummy_output.txt" ]

proc "t" [val key] [val language $defaultLanguage] {
	try {
		// concat "Searching: " $language "." $key | log
		$translations | get $language | get $key
		} -catch {
		concat "Unable to fetch key " $key " in translation_" $language ".properties"  | log -severity Error
		bool false
	}
}
t "open" "de" | eq "Öffnen" | verify-true
t "open" "fr" | eq "Ouvrir" | verify-true

global [ val praxisProperties [ read-properties -uri [concat [get-java-property user.home] "/elexis/rcptt/praxis_" $defaultLanguage ".properties"]]]
global [ val test_properties  [ read-properties -uri [concat [get-java-property user.home] "/elexis/rcptt/test.properties"]]]

proc "GetPraxisProperty" [val key]  {
	try {
		// concat "Searching: " $language "." $key | log
		$praxisProperties | get $key
		} -catch {
			concat "Unable to fetch key " $key " in praxis.properties"  | log -severity Error
			concat ""
	}
}

proc "GetTestProperty" [val key] [val default "" ] {
	try {
		$test_properties | get $key
		} -catch {
			concat "Unable to fetch key " $key " in test.properties"  | log -severity Error
			concat $default
	}
}
GetTestProperty patient.1.familyName | matches Testarossa | assert-true

proc handleResetPerspectiveDialog {
	try {
		concat "handleResetPerspectiveDialog via "  [ t window_reset_perspective ] " and "  [ t btn_reset_perspective ]  | log
		get-window [ t window_reset_perspective ] | get-button [ t btn_reset_perspective ]  | click
		log "handleResetPerspectiveDialog done"
	} -catch {
		log "handleResetPerspectiveDialog failed"
	}
}
proc resetPerspective {
// get-button "Perspektive zurücksetzen" | click
// get-window "Perspektive zurücksetzen" | get-button "Reset Perspective" | click
	if [ get-button [ t global_btn_reset_perspective ] | get-property enablement -raw | equals true ] {
		get-button [ t global_btn_reset_perspective ] | click
		handleResetPerspectiveDialog
	} -else {
		log "Button reset_perspective is disabled"
	}
}

/**
 * Resets to the default perspectives an
 */

proc OpenAndResetStartPerspektive {
	try {
		get-button [ t btn_start_perspective ] | click
		} -error [val errorObj] -catch {
			// Seen when running ImportSwissbase with french Elexis
			concat "Errror " [$errorObj | get message] "in btn_start_perspective " [ t btn_start_perspective ]  | log
			set-dialog-result File "/dummy_ecl_helpers"
	}
	handleResetPerspectiveDialog
	resetPerspective
	// we need reproducable conditions else labels etc suddenly vanish
	get-eclipse-window | get-object | invoke setSize 1400 1024
	concat "OpenAndResetStartPerspektive: Size is " [ get-eclipse-window | get-object | invoke getSize ] | log
}

/**
 * Logs and creates a snapshot of the passed graphical object
 */
proc "gen-screenshot" [ val parent -input ] [ val out [concat $imagesDir "dest.png"] ] {
	$parent | get-object | save-screenshot $out
	concat "gen-screenshot: " $out | log
}

proc "create-entire-screenshot" [ val out [concat $imagesDir "screen.png"] ] {
	if [ get-by-os  -win true -macosx true -linux false ] {
		// We create normal screenshot on windows and macOSX as we do not run under openbox
		// and we get the windows titles anyway
		get-eclipse-window | gen-screenshot $out
	} -else {
		concat "create-entire-screenshot 1 " $out | log
		get-eclipse-window | gen-screenshot $out // creates directory if necessary
		concat "create-entire-screenshot 2 " $out | log
		take-screenshot $out // creates directory if necessary
		concat "create-entire-screenshot 3 " $out | log
		let [ val result [ exec-process "import" "-window" "root" $out -ignoreExitCode true  ] ] {
			concat "create-entire-screenshot " $out " returned " [ $result | get  exitCode ] | log
		}
		concat "create-entire-screenshot done " $out | log
	}
}

proc "GetActPatPersonalia" {
	invoke-static -pluginId ch.elexis.core.data -className ch.elexis.core.data.events.ElexisEventDispatcher -methodName getSelectedPatient |
		invoke getPersonalia
}

/**
 * Return the windows title, eg.
 *    Elexis 3.8.0.20190529-1746 -  Mustermann Max / Mustermann Max  / Armes-de Wesen (w), 15.02.1990 (29) - [6]
 */
proc "GetWindowTitle" {
	get-button[t zur_startperspektive] | get-object  | invoke getParent  | invoke getParent | invoke getParent | invoke getParent | invoke getText
}

proc "GetMainToolbar" {
	get-button[t zur_startperspektive] | get-object  | invoke getParent  | invoke getParent | invoke getParent
}

proc "GetBottomToolbar" {
	get-button Restore | get-object | invoke getParent | invoke getParent | invoke getParent
}

create-entire-screenshot [ concat $imagesDir "ecl_helper_started.png"]
take-screenshot  [ concat $imagesDir "ecl_helper_screenshot.png"]
trace [ concat "trace " $imagesDir "ecl_helper_screenshot.png"]
//
// Ende

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
